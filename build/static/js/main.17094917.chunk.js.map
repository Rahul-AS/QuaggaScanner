{"version":3,"sources":["Scanner/QuaggaBarcodeScanner/QuaggaBarcodeScanner.jsx","App.js","index.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","QuaggaBarcodeScanner","firstUpdate","useRef","_useState","useState","_useState2","_slicedToArray","isStart","setIsStart","_useState3","_useState4","barcode","setBarcode","useEffect","stopScanner","current","startScanner","_onDetected","_ref","_asyncToGenerator","_callee","res","_context","codeResult","code","_x","apply","arguments","Quagga","init","inputStream","target","document","querySelector","constraints","facingMode","numOfWorkers","navigator","hardwareConcurrency","locate","frequency","debug","drawBoundingBox","showFrequency","drawScanline","showPattern","multiple","locator","halfSample","patchSize","showCanvas","showPatches","showFoundPatches","showSkeleton","showLabels","showPatchLabels","showRemainingPatchLabels","boxFromPatches","showTransformed","showTransformedBox","showBB","decoder","readers","console","log","start","onDetected","onProcessed","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","ImageDebug","drawPath","x","y","color","lineWidth","line","offProcessed","offDetected","React","createElement","onClick","prevStart","style","marginBottom","Fragment","id","App","className","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.17094917.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport Quagga from 'quagga';\r\nimport './QuaggaBarcodeScannerStyle.css';\r\n\r\nconst QuaggaBarcodeScanner = () => {\r\n    const firstUpdate = useRef(true);\r\n    const [isStart, setIsStart] = useState(false);\r\n    const [barcode, setBarcode] = useState('');\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            if (isStart) stopScanner();\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (firstUpdate.current) {\r\n            firstUpdate.current = false;\r\n            return;\r\n        }\r\n\r\n        if (isStart) startScanner();\r\n        else stopScanner();\r\n    }, [isStart]);\r\n\r\n    const _onDetected = async (res) => {\r\n        setBarcode(res.codeResult.code);\r\n    };\r\n\r\n    const startScanner = () => {\r\n        Quagga.init(\r\n            {\r\n                inputStream: {\r\n                    type: 'LiveStream',\r\n                    target: document.querySelector('#scanner-container'),\r\n                    constraints: {\r\n                        facingMode: 'environment', // or user\r\n                    },\r\n                },\r\n                numOfWorkers: navigator.hardwareConcurrency,\r\n                locate: true,\r\n                frequency: 1,\r\n                debug: {\r\n                    drawBoundingBox: true,\r\n                    showFrequency: true,\r\n                    drawScanline: true,\r\n                    showPattern: true,\r\n                },\r\n                multiple: false,\r\n                locator: {\r\n                    halfSample: false,\r\n                    patchSize: 'large', // x-small, small, medium, large, x-large\r\n                    debug: {\r\n                        showCanvas: false,\r\n                        showPatches: false,\r\n                        showFoundPatches: false,\r\n                        showSkeleton: false,\r\n                        showLabels: false,\r\n                        showPatchLabels: false,\r\n                        showRemainingPatchLabels: false,\r\n                        boxFromPatches: {\r\n                            showTransformed: false,\r\n                            showTransformedBox: false,\r\n                            showBB: false,\r\n                        },\r\n                    },\r\n                },\r\n                decoder: {\r\n                    readers: [\r\n                        'code_128_reader',\r\n                        'ean_reader',\r\n                        'ean_8_reader',\r\n                        'code_39_reader',\r\n                        'code_39_vin_reader',\r\n                        'codabar_reader',\r\n                        'upc_reader',\r\n                        'upc_e_reader',\r\n                        'i2of5_reader',\r\n                        'i2of5_reader',\r\n                        '2of5_reader',\r\n                        'code_93_reader',\r\n                    ],\r\n                },\r\n            },\r\n            (err) => {\r\n                if (err) {\r\n                    return console.log(err);\r\n                }\r\n                Quagga.start();\r\n            }\r\n        );\r\n        Quagga.onDetected(_onDetected);\r\n        Quagga.onProcessed((result) => {\r\n            let drawingCtx = Quagga.canvas.ctx.overlay,\r\n                drawingCanvas = Quagga.canvas.dom.overlay;\r\n\r\n            if (result) {\r\n                if (result.boxes) {\r\n                    drawingCtx.clearRect(\r\n                        0,\r\n                        0,\r\n                        parseInt(drawingCanvas.getAttribute('width')),\r\n                        parseInt(drawingCanvas.getAttribute('height'))\r\n                    );\r\n                    result.boxes\r\n                        .filter((box) => box !== result.box)\r\n                        .forEach((box) => {\r\n                            Quagga.ImageDebug.drawPath(\r\n                                box,\r\n                                { x: 0, y: 1 },\r\n                                drawingCtx,\r\n                                {\r\n                                    color: 'green',\r\n                                    lineWidth: 2,\r\n                                }\r\n                            );\r\n                        });\r\n                }\r\n\r\n                if (result.box) {\r\n                    Quagga.ImageDebug.drawPath(\r\n                        result.box,\r\n                        { x: 0, y: 1 },\r\n                        drawingCtx,\r\n                        { color: '#00F', lineWidth: 2 }\r\n                    );\r\n                }\r\n\r\n                if (result.codeResult && result.codeResult.code) {\r\n                    Quagga.ImageDebug.drawPath(\r\n                        result.line,\r\n                        { x: 'x', y: 'y' },\r\n                        drawingCtx,\r\n                        { color: 'red', lineWidth: 3 }\r\n                    );\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    const stopScanner = () => {\r\n        Quagga.offProcessed();\r\n        Quagga.offDetected();\r\n        Quagga.stop();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Barcode scanner in React</h3>\r\n            <button\r\n                onClick={() => setIsStart((prevStart) => !prevStart)}\r\n                style={{ marginBottom: 20 }}\r\n            >\r\n                {isStart ? 'Stop' : 'Start'}\r\n            </button>\r\n            {isStart && (\r\n                <React.Fragment>\r\n                    <div id='scanner-container' />\r\n                    <span>Barcode: {barcode}</span>\r\n                </React.Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuaggaBarcodeScanner;\r\n","import './App.css';\nimport React from 'react';\nimport QuaggaBarcodeScanner from './Scanner/QuaggaBarcodeScanner/QuaggaBarcodeScanner';\n\nconst App = () => {\n    return (\n        <div className='App'>\n            <QuaggaBarcodeScanner />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}